/*************************************Program to project a 3-D vector onto a screen<p>Tim McIntyre<br>V1<br>June 2015*************************************/function TProjector() {	this.phixz = 0;					// Viewing angle in xz plane from z axis	this.thetay = Math.PI/2;		// Viewing angle around from y-axis	this.rs0 = 2;					// Distance from origin to viewing screen	this.rv0 = 10;					// Distance from origin to viewer	this.rOut = new TVector();		// Projected vector - x & y store values in screen plane}	TProjector.prototype.reset = function(Thetay, Phixz, Rv, Rs) {	this.thetay = Thetay;	this.phixz = Phixz;	this.rv0 = Rv;	this.rs0 = Rs;}TProjector.prototype.distanceViewerToScreen = function() {	return Math.abs(this.rv0 - this.rs0);}TProjector.prototype.Viewer = function() {	var rv = new TVector();	rv.setXYZ(Math.sin(this.thetay) * Math.sin(this.phixz), Math.cos(this.thetay), Math.sin(this.thetay) * Math.cos(this.phixz));	rv.times(this.rv0);	return rv;}TProjector.prototype.project = function(r) {	// Transforms point in space onto viewing place on screen	var n = new TVector();	n.setXYZ(Math.sin(this.thetay) * Math.sin(this.phixz), Math.cos(this.thetay), Math.sin(this.thetay) * Math.cos(this.phixz));	var rv = new TVector();	rv.copy(n);	rv.times(this.rv0);	var rs = new TVector();	rs.copy(n);	rs.times(-this.rs0);	var rdotn = new TVector();	rdotn.copy(r);	var c = (this.rs0 + this.rv0) / (this.rv0 - rdotn.dotProduct(n));	this.rOut = new TVector();	this.rOut.copy(r);	this.rOut.subtract(rv);	this.rOut.times(c);	this.rOut.add(rv);	var d = this.rOut.distanceTo(r);	this.rOut.subtract(rs);	this.rOut.rotate(-n.rotateAngle(2),2);	n.rotate(-n.rotateAngle(2),2);	this.rOut.rotate(-n.rotateAngle(1),1);	this.rOut.setValue(3,d);	return this.rOut;}TProjector.prototype.unprojectScreen = function(r) {	// Transforms point on screen back into real space	var n = new TVector();	n.setXYZ(Math.sin(this.thetay) * Math.sin(this.phixz), Math.cos(this.thetay), Math.sin(this.thetay) * Math.cos(this.phixz));	var rs = new TVector();	rs.copy(n);	n.rotate(-n.rotateAngle(2),2);	rs.times(this.rs0);	this.rOut = new TVector();	this.rOut.copy(r);	this.rOut.setValue(3,0);	this.rOut.rotate(n.rotateAngle(1),1);	n.rotate(n.rotateAngle(2),2);	this.rOut.rotate(n.rotateAngle(2),2);	this.rOut.add(rs);	return this.rOut;}