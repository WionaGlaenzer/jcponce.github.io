/*************************************Script to control a vector<p>Tim McIntyre<br>V1<br>June 2015*************************************/function TVector() {	this.length = 3;	this.reset()}	/************************************ Sets the size of the vector ************************************/TVector.prototype.setLength = function(newlength) {	this.length = newlength;	this.reset();}	/************************************ Sets the values of a 3-vector ************************************/TVector.prototype.setXYZ = function(newX, newY, newZ) {	this.r[0] = newX;	this.r[1] = newY;	this.r[2] = newZ;}/************************************ Copies values from a vector ************************************/TVector.prototype.copy = function(v) {	this.length = v.length;	this.reset();	for (var i = 0; i < this.length; i++)		this.r[i] = v.getValue(i+1);}/************************************ Resets all values to zero ************************************/TVector.prototype.reset = function() {	this.r = new Array(this.length);	for (var i = 0; i < this.length; i++)		this.r[i] = 0;}/************************************ Returns the value of a component - index starts at 1 (not 0) ************************************/TVector.prototype.getValue = function(which) {	if (which > 0 && which <= this.length)		return this.r[which - 1];	else		return 0;}/************************************ Returns the x-component ************************************/TVector.prototype.X = function() {	return this.r[0];}	/************************************ Returns the y component ************************************/TVector.prototype.Y = function() {	return this.r[1];}	/************************************ returns the z component ************************************/TVector.prototype.Z = function() {	return this.r[2];}	/************************************ Sets the value of one of the components - index starts at 1 (not 0) ************************************/TVector.prototype.setValue = function(which, val) {	if (which > 0 && which <= this.length)		this.r[which - 1] = val;}/************************************ Adds a vector to the current vector ************************************/TVector.prototype.add = function(v) {	if (v.length == this.length)		for (var i = 0; i < this.length; i++)			this.r[i] += v.getValue(i+1);}/************************************ Subtracts a vector from the current vector ************************************/TVector.prototype.subtract = function(v) {	if (v.length == this.length)		for (var i = 0; i < this.length; i++)			this.r[i] -= v.getValue(i+1);}	/************************************ Multiplies the vector by a constant ************************************/TVector.prototype.times = function(d) {	for (var i = 0; i < this.length; i++)		this.r[i] *= d;}	/************************************ Returns true if two vectors are equal ************************************/TVector.prototype.equals = function(v) {	if (this.length != v.length)		return false;	var isEqual = true;	for (var i = 0; i < this.length; i++)		if (this.r[i] != v.getValue(i+1))			isEqual = false;	return isEqual;}		/************************************ Returns the dot product of two vectors ************************************/TVector.prototype.dotProduct = function(v) {	if (v.length == this.length) {		var m = 0;		for (var i = 0; i < this.length; i++)			m += this.r[i] * v.getValue(i+1);			 		return m;	} else {		return 0;	}}	/************************************ Returns the magnitude of the vector ************************************/TVector.prototype.magnitude = function() {	var m = 0;	for (var i = 0; i < this.length; i++)		m += this.r[i] * this.r[i];			 	return Math.sqrt(m);}	/************************************ Returns the distance to another vector ************************************/TVector.prototype.distanceTo = function(v) {	var m = 0;	for (var i = 0; i < this.length; i++)		m += (v.getValue(i+1) - this.r[i]) * (v.getValue(i+1) - this.r[i]);			 	return Math.sqrt(m);}	/************************************ Returns the angle to an axis (?) 1-x, 2-y, 3-z ************************************/TVector.prototype.rotateAngle = function(axis) {	var i,j,k;	switch (axis) {		case 1: i = 1;				j = 0;				k = 2;				break;		case 2: i = 0;				j = 1;				k = 2;				break;		case 3: i = 0;				j = 2;				k = 1;				break;		default: i = 0;				 j = 2;				 k = 1;				 break;	}	return(Math.atan2(this.r[i],this.r[k]));			}	/************************************ Rotates about given axis 1-x, 2-y, 3-z ************************************/TVector.prototype.rotate = function(dphi, axis) {	var rlength = this.magnitude();	var i,j,k;	switch (axis) {		case 1: i = 1;				j = 0;				k = 2;				break;		case 2: i = 0;				j = 1;				k = 2;				break;		case 3: i = 0;				j = 2;				k = 1;				break;		default: i = 0;				 j = 2;				 k = 1;				 break;	}				var phi;	if (rlength != 0) {		if (this.r[k] == 0) {			if (this.r[i] > 0)				phi = Math.PI/2 + dphi;			else					phi = -Math.PI/2 + dphi;		}				else			phi = Math.atan2(this.r[i],this.r[k]) + dphi;		var theta = Math.acos(this.r[j] / rlength);		this.r[i] = rlength * Math.sin(theta) * Math.sin(phi);		this.r[j] = rlength * Math.cos(theta);		this.r[k] = rlength * Math.sin(theta) * Math.cos(phi);	}	else {		this.r[i] = 0;		this.r[j] = 0;		this.r[k] = 0;	}		}